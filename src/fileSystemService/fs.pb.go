// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.3
// source: fs.proto

package fileSystemService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RcloneArguments int32

const (
	RcloneArguments_NO_TRAVERSE           RcloneArguments = 0
	RcloneArguments_CREATE_EMPTY_SRC_DIRS RcloneArguments = 1
	RcloneArguments_DELETE_EMPTY_SRC_DIRS RcloneArguments = 2
	RcloneArguments_ABOUT_FORMAT_JSON     RcloneArguments = 3
)

// Enum value maps for RcloneArguments.
var (
	RcloneArguments_name = map[int32]string{
		0: "NO_TRAVERSE",
		1: "CREATE_EMPTY_SRC_DIRS",
		2: "DELETE_EMPTY_SRC_DIRS",
		3: "ABOUT_FORMAT_JSON",
	}
	RcloneArguments_value = map[string]int32{
		"NO_TRAVERSE":           0,
		"CREATE_EMPTY_SRC_DIRS": 1,
		"DELETE_EMPTY_SRC_DIRS": 2,
		"ABOUT_FORMAT_JSON":     3,
	}
)

func (x RcloneArguments) Enum() *RcloneArguments {
	p := new(RcloneArguments)
	*p = x
	return p
}

func (x RcloneArguments) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RcloneArguments) Descriptor() protoreflect.EnumDescriptor {
	return file_fs_proto_enumTypes[0].Descriptor()
}

func (RcloneArguments) Type() protoreflect.EnumType {
	return &file_fs_proto_enumTypes[0]
}

func (x RcloneArguments) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RcloneArguments.Descriptor instead.
func (RcloneArguments) EnumDescriptor() ([]byte, []int) {
	return file_fs_proto_rawDescGZIP(), []int{0}
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32       `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"` //0 for Success, 1 for Received
	Msg      string      `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Data     []byte      `protobuf:"bytes,3,opt,name=Data,proto3,oneof" json:"Data,omitempty"` //Data or File Unique Mark
	FileInfo []*FileInfo `protobuf:"bytes,4,rep,name=FileInfo,proto3" json:"FileInfo,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_fs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_fs_proto_rawDescGZIP(), []int{0}
}

func (x *Result) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Result) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Result) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Result) GetFileInfo() []*FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Data  []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	IsDir bool   `protobuf:"varint,3,opt,name=isDir,proto3" json:"isDir,omitempty"`
	Name  string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_fs_proto_rawDescGZIP(), []int{1}
}

func (x *FileInfo) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *FileInfo) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FileInfo) GetIsDir() bool {
	if x != nil {
		return x.IsDir
	}
	return false
}

func (x *FileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Param struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      *string           `protobuf:"bytes,1,opt,name=Source,proto3,oneof" json:"Source,omitempty"` // Source or Operation Path
	Destination *string           `protobuf:"bytes,2,opt,name=Destination,proto3,oneof" json:"Destination,omitempty"`
	Data        *FileInfo         `protobuf:"bytes,3,opt,name=Data,proto3,oneof" json:"Data,omitempty"`
	Args        []RcloneArguments `protobuf:"varint,4,rep,packed,name=Args,proto3,enum=fileSystemService.RcloneArguments" json:"Args,omitempty"`
}

func (x *Param) Reset() {
	*x = Param{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Param) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Param) ProtoMessage() {}

func (x *Param) ProtoReflect() protoreflect.Message {
	mi := &file_fs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Param.ProtoReflect.Descriptor instead.
func (*Param) Descriptor() ([]byte, []int) {
	return file_fs_proto_rawDescGZIP(), []int{2}
}

func (x *Param) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *Param) GetDestination() string {
	if x != nil && x.Destination != nil {
		return *x.Destination
	}
	return ""
}

func (x *Param) GetData() *FileInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Param) GetArgs() []RcloneArguments {
	if x != nil {
		return x.Args
	}
	return nil
}

var File_fs_proto protoreflect.FileDescriptor

var file_fs_proto_rawDesc = []byte{
	0x0a, 0x08, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x89, 0x01,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x17,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5e, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x73, 0x44, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x44, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x05, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x02, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x04, 0x41, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x04, 0x41, 0x72, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x2a, 0x6f, 0x0a, 0x0f, 0x52, 0x63, 0x6c,
	0x6f, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0f, 0x0a, 0x0b,
	0x4e, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x56, 0x45, 0x52, 0x53, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x53, 0x52,
	0x43, 0x5f, 0x44, 0x49, 0x52, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x44, 0x49, 0x52,
	0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x42, 0x4f, 0x55, 0x54, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x03, 0x32, 0xdc, 0x07, 0x0a, 0x0a, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x41, 0x0a, 0x08, 0x46, 0x53, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a,
	0x19, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x28, 0x01, 0x12, 0x3f, 0x0a, 0x08,
	0x46, 0x53, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x1a, 0x19, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a,
	0x06, 0x46, 0x53, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x1a, 0x19, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x06,
	0x46, 0x53, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x1a, 0x19, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x52,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x1a, 0x19, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01,
	0x12, 0x43, 0x0a, 0x0a, 0x52, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x18,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x19, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x0a, 0x52, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x19, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x0a, 0x52, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x1a, 0x19, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12,
	0x49, 0x0a, 0x10, 0x52, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x19, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x13, 0x52, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x19, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x4a, 0x0a, 0x11, 0x52, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x18, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x19, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x30, 0x01, 0x12, 0x47, 0x0a, 0x0e, 0x52, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x1a, 0x19, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x44, 0x0a,
	0x0b, 0x52, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x12, 0x18, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x19, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x52, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x41, 0x62, 0x6f,
	0x75, 0x74, 0x12, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x19, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x42, 0x15, 0x5a, 0x13, 0x2e, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fs_proto_rawDescOnce sync.Once
	file_fs_proto_rawDescData = file_fs_proto_rawDesc
)

func file_fs_proto_rawDescGZIP() []byte {
	file_fs_proto_rawDescOnce.Do(func() {
		file_fs_proto_rawDescData = protoimpl.X.CompressGZIP(file_fs_proto_rawDescData)
	})
	return file_fs_proto_rawDescData
}

var file_fs_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_fs_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_fs_proto_goTypes = []interface{}{
	(RcloneArguments)(0), // 0: fileSystemService.RcloneArguments
	(*Result)(nil),       // 1: fileSystemService.Result
	(*FileInfo)(nil),     // 2: fileSystemService.FileInfo
	(*Param)(nil),        // 3: fileSystemService.Param
}
var file_fs_proto_depIdxs = []int32{
	2,  // 0: fileSystemService.Result.FileInfo:type_name -> fileSystemService.FileInfo
	2,  // 1: fileSystemService.Param.Data:type_name -> fileSystemService.FileInfo
	0,  // 2: fileSystemService.Param.Args:type_name -> fileSystemService.RcloneArguments
	3,  // 3: fileSystemService.FileSystem.FSCreate:input_type -> fileSystemService.Param
	3,  // 4: fileSystemService.FileSystem.FSDelete:input_type -> fileSystemService.Param
	3,  // 5: fileSystemService.FileSystem.FSMove:input_type -> fileSystemService.Param
	3,  // 6: fileSystemService.FileSystem.FSList:input_type -> fileSystemService.Param
	3,  // 7: fileSystemService.FileSystem.RCloneCopy:input_type -> fileSystemService.Param
	3,  // 8: fileSystemService.FileSystem.RCloneMove:input_type -> fileSystemService.Param
	3,  // 9: fileSystemService.FileSystem.RCloneLink:input_type -> fileSystemService.Param
	3,  // 10: fileSystemService.FileSystem.RCloneList:input_type -> fileSystemService.Param
	3,  // 11: fileSystemService.FileSystem.RCloneListFormat:input_type -> fileSystemService.Param
	3,  // 12: fileSystemService.FileSystem.RCloneListDirectory:input_type -> fileSystemService.Param
	3,  // 13: fileSystemService.FileSystem.RCloneListRemotes:input_type -> fileSystemService.Param
	3,  // 14: fileSystemService.FileSystem.RCloneListJson:input_type -> fileSystemService.Param
	3,  // 15: fileSystemService.FileSystem.RCloneMkdir:input_type -> fileSystemService.Param
	3,  // 16: fileSystemService.FileSystem.RCloneAbout:input_type -> fileSystemService.Param
	1,  // 17: fileSystemService.FileSystem.FSCreate:output_type -> fileSystemService.Result
	1,  // 18: fileSystemService.FileSystem.FSDelete:output_type -> fileSystemService.Result
	1,  // 19: fileSystemService.FileSystem.FSMove:output_type -> fileSystemService.Result
	1,  // 20: fileSystemService.FileSystem.FSList:output_type -> fileSystemService.Result
	1,  // 21: fileSystemService.FileSystem.RCloneCopy:output_type -> fileSystemService.Result
	1,  // 22: fileSystemService.FileSystem.RCloneMove:output_type -> fileSystemService.Result
	1,  // 23: fileSystemService.FileSystem.RCloneLink:output_type -> fileSystemService.Result
	1,  // 24: fileSystemService.FileSystem.RCloneList:output_type -> fileSystemService.Result
	1,  // 25: fileSystemService.FileSystem.RCloneListFormat:output_type -> fileSystemService.Result
	1,  // 26: fileSystemService.FileSystem.RCloneListDirectory:output_type -> fileSystemService.Result
	1,  // 27: fileSystemService.FileSystem.RCloneListRemotes:output_type -> fileSystemService.Result
	1,  // 28: fileSystemService.FileSystem.RCloneListJson:output_type -> fileSystemService.Result
	1,  // 29: fileSystemService.FileSystem.RCloneMkdir:output_type -> fileSystemService.Result
	1,  // 30: fileSystemService.FileSystem.RCloneAbout:output_type -> fileSystemService.Result
	17, // [17:31] is the sub-list for method output_type
	3,  // [3:17] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_fs_proto_init() }
func file_fs_proto_init() {
	if File_fs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Param); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_fs_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_fs_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fs_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fs_proto_goTypes,
		DependencyIndexes: file_fs_proto_depIdxs,
		EnumInfos:         file_fs_proto_enumTypes,
		MessageInfos:      file_fs_proto_msgTypes,
	}.Build()
	File_fs_proto = out.File
	file_fs_proto_rawDesc = nil
	file_fs_proto_goTypes = nil
	file_fs_proto_depIdxs = nil
}
